"""add subscription fields to user table

Revision ID: 5cdc8f61f418
Revises: 8218252fef45
Create Date: 2025-04-27 09:39:48.180059

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5cdc8f61f418'
down_revision: Union[str, None] = '8218252fef45'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if enum exists first
    connection = op.get_bind()
    if not connection.dialect.has_type(connection, "subscriptionplantype"):
        subscription_plan_enum = sa.Enum('FREE', 'PREMIUM', name='subscriptionplantype')
        subscription_plan_enum.create(op.get_bind())
    
    # Add columns if they don't exist
    # Use try/except to handle cases where columns might already exist
    try:
        op.add_column('users', sa.Column('subscription_plan', sa.Enum('FREE', 'PREMIUM', name='subscriptionplantype'), nullable=True))
    except Exception:
        pass
        
    try:
        op.add_column('users', sa.Column('subscription_start_date', sa.DateTime(), nullable=True))
    except Exception:
        pass
        
    try:
        op.add_column('users', sa.Column('subscription_expiry_date', sa.DateTime(), nullable=True))
    except Exception:
        pass
        
    try:
        op.add_column('users', sa.Column('subscription_auto_renew', sa.Boolean(), nullable=True))
    except Exception:
        pass
        
    try:
        op.add_column('users', sa.Column('payment_reference', sa.String(), nullable=True))
    except Exception:
        pass
    
    # Set default values for existing users
    try:
        op.execute("UPDATE users SET subscription_plan = 'FREE' WHERE subscription_plan IS NULL")
        op.execute("UPDATE users SET subscription_auto_renew = FALSE WHERE subscription_auto_renew IS NULL")
    except Exception:
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'payment_reference')
    op.drop_column('users', 'subscription_auto_renew')
    op.drop_column('users', 'subscription_expiry_date')
    op.drop_column('users', 'subscription_start_date')
    op.drop_column('users', 'subscription_plan')
    
    # Only drop if it exists
    connection = op.get_bind()
    if connection.dialect.has_type(connection, "subscriptionplantype"):
        op.execute('DROP TYPE subscriptionplantype')
    # ### end Alembic commands ###
